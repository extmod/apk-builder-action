name: Build Android APK
run-name: ${{ github.event.inputs.repository }} ${{ github.event.inputs.branchName && format('{0}', github.event.inputs.branchName) }} ${{ github.event.inputs.subdir && format('[/{0}]', github.event.inputs.subdir) }} :${{ github.event.inputs.taskName }}

on:
  workflow_dispatch:
    inputs:
      repository:
        description: "Git repository URL"
        required: true
        default: "https://github.com/android/sunflower"
      branchName:
        description: "Git branch name"
        required: false
        default: ""
      subdir:
        description: "Relative subdirectory path when the project is nested"
        required: false
        default: ""
      jdkVersion:
        description: "OpenJDK version to use: 8 / 11 / 17 etc."
        required: false
        default: "17"
      taskName:
        description: "build.gradle task name: assembleDebug, assembleRelease, etc."
        required: false
        default: "assembleRelease"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ github.event.inputs.jdkVersion }}

      - name: Clone project
        run: |
          set -euo pipefail
          if [[ -z "${{ github.event.inputs.branchName }}" ]]; then
            git clone --recurse-submodules --depth=1 ${{ github.event.inputs.repository }} workspace
          else
            git clone --recurse-submodules --depth=1 --branch ${{ github.event.inputs.branchName }} ${{ github.event.inputs.repository }} workspace
          fi

      - name: Build APK
        # if subdir is empty, working-directory resolves to ./workspace/
        working-directory: ./workspace/${{ github.event.inputs.subdir }}
        run: |
          set -euo pipefail

          # Set which Gradle to use to create wrapper (compatible with AGP 7.4.2)
          GRADLE_VER=7.5.1

          echo "Using temporary Gradle ${GRADLE_VER} (downloaded) to create wrapper if missing..."

          # Download Gradle distribution and extract to $HOME/gradle
          mkdir -p "$HOME/gradle"
          curl -sSLo gradle.zip "https://services.gradle.org/distributions/gradle-${GRADLE_VER}-bin.zip"
          unzip -q gradle.zip -d "$HOME/gradle"
          rm -f gradle.zip

          # Put downloaded gradle bin onto PATH for this step
          export PATH="$HOME/gradle/gradle-${GRADLE_VER}/bin:$PATH"

          # If gradlew not present, create wrapper using compatible Gradle
          if [ ! -f "gradlew" ]; then
            echo "gradlew not found — creating Gradle wrapper with Gradle ${GRADLE_VER}..."
            gradle wrapper --gradle-version "${GRADLE_VER}"
          fi

          chmod +x ./gradlew

          # Print some diagnostics
          echo "GRADLE (wrapper ?) exists?"; ls -la gradlew || true
          echo "gradle-wrapper.properties:"
          if [ -f "gradle/wrapper/gradle-wrapper.properties" ]; then
            sed -n '1,120p' gradle/wrapper/gradle-wrapper.properties || true
          fi

          # Build (use signing for release tasks)
          if [[ "${{ github.event.inputs.taskName }}" == *Release* ]]; then
            echo "Task contains 'Release' — creating debug keystore for signing if needed..."
            if [ ! -f "$HOME/.android/debug.keystore" ]; then
              keytool -genkey -v -keystore debug.keystore -storepass android \
                -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 \
                -dname "C=US, O=Android, CN=Android Debug"
              mkdir -p "$HOME/.android"
              mv debug.keystore "$HOME/.android/debug.keystore"
            fi

            echo "Running ./gradlew ${{ github.event.inputs.taskName }} (Release with debug signing)..."
            ./gradlew ${{ github.event.inputs.taskName }} \
              -Pandroid.injected.signing.store.file="$HOME/.android/debug.keystore" \
              -Pandroid.injected.signing.store.password=android \
              -Pandroid.injected.signing.key.alias=androiddebugkey \
              -Pandroid.injected.signing.key.password=android \
              --stacktrace
          else
            echo "Running ./gradlew ${{ github.event.inputs.taskName }} (non-release)..."
            ./gradlew ${{ github.event.inputs.taskName }} --stacktrace
          fi

      - name: Upload the APK artifact with 1 day retention
        uses: actions/upload-artifact@v4
        with:
          path: workspace/**/*.apk
          name: apk-archive
          retention-days: 1